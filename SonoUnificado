//Y - A X I S   D A T A
//      ->                        Y                    <-


let pages = dv
    .pages('"Jornada/Notas Diárias"')
    .filter(p => {
        // Converter o nome do arquivo da página atual para um objeto moment e formatá-lo
        let dateOfFile = window.moment(p.file.name, "YYYY-MM-DD");
        let formattedDate = dateOfFile.isValid() ? dateOfFile.format("YYYY-MM-DD") : null;
        // Verificar se a data formatada está dentro do intervalo especificado
        return formattedDate && window.moment(formattedDate).isSameOrAfter(window.moment(input.START)) && window.moment(formattedDate).isSameOrBefore(window.moment(input.END));
    })
	.sort(p => p.file.name);



const ratingData = pages.notadoDia;
const sleepStart = pages.sleepStart;
const sleepEnd = pages.sleepEnd;
const sleepRatingData = pages.notadoSono;







// went to bed       /    wake-up
// HH:mm 24h



const sleepStartStop = sleepStart.values.map((value, index) => {
	return [value, sleepEnd.values[index]];
});

const sleepStartStopNumber = sleepStart.values.map((value, index) => {
    let startHours = parseInt(value.split(':')[0]);
    let startMinutes = parseInt(value.split(':')[1]);
    let endHours = parseInt(sleepEnd.values[index].split(':')[0]);
    let endMinutes = parseInt(sleepEnd.values[index].split(':')[1]);

    // Converte horas e minutos em formato decimal
    let startDecimal = startHours + startMinutes / 60;
    let endDecimal = endHours + endMinutes / 60;

    // Ajusta o horário de início se for após as 20h para refletir como valor negativo no gráfico
    if (startHours > 20) {
        startDecimal -= 24;
    }

    return [startDecimal, endDecimal];
});








// Sleep Duration hours and minutes 



let sleepData = sleepStart.values.map((startValue, index) => {
    // Extrai horas e minutos do horário de início
    let [startHour, startMinute] = startValue.split(':').map(Number);
    let startMinutesTotal = startHour * 60 + startMinute;

    // Extrai horas e minutos do horário de fim
    let endValue = sleepEnd.values[index];
    let [endHour, endMinute] = endValue.split(':').map(Number);
    let endMinutesTotal = endHour * 60 + endMinute;

    // Ajusta para quando o sono passa da meia-noite
    if (endMinutesTotal < startMinutesTotal) {
        endMinutesTotal += 24 * 60;
    }

    // Calcula a duração total em minutos
    let durationMinutes = endMinutesTotal - startMinutesTotal;
    // Converte a duração para horas e minutos
    let durationHours = Math.floor(durationMinutes / 60);
    let remainingMinutes = durationMinutes % 60;

    let date = moment(sleepEnd.dates[index], "YYYY-MM-DD");

    // Retorna o objeto com data e duração formatada
    return {
        date: date.format("YYYY-MM-DD"),
        duration: `${durationHours}h${remainingMinutes.toString().padStart(2, '0')}m` // Assegura dois dígitos para os minutos
    };
});



let sleepDurationData = sleepData.map(item => {
    // Assume que item.duration está no formato "XhYm"
    let parts = item.duration.match(/(\d+)h(\d+)m/);
    if (parts) {
        let hours = parseInt(parts[1], 10);
        let minutes = parseInt(parts[2], 10);
        return hours + minutes / 60; // Converte "XhYm" para um valor decimal
    }
    return 0; // Retorna 0 se o formato não corresponder, como medida de precaução
});









// Label X data config
//      ->                        X                      <-





let timeDate = pages.map(p => {
    let dateOfFile = window.moment(p.file.name,"YYYY-MM-DD");
    return dateOfFile.isValid() ? dateOfFile.format("YYYY-MM-DD") : "Invalid Date";
	s
})
.filter(date => date !== "Invalid Date") // Filtra datas inválidas.
.sort((a, b) => window.moment(a).diff(window.moment(b))); // diff é uma função que calcula a diferença Ordena do mais velho para o mais novo.



// Config Chart


const chartData = {
	beginAtZero: true,

	data: {
		labels: timeDate,
		datasets: [
			{
				yAxisID: 'A',
				type: 'line',
				label: 'day rating',
				data: ratingData.values,
				borderColor: ['rgb(255, 99, 132)'],
				borderWidth: 1,
				bestFit: true,
			},
			{
				yAxisID: 'A',
				type: 'line',
				label: 'Sleep Duration',
				data: sleepDurationData,
				borderColor: ['rgb(54, 162, 235)'],
				borderWidth: 1,
				bestFit: true,
			},
			{
				yAxisID: 'A',
				type: 'line',
				label: 'Sleep rate',
				data: sleepRatingData.values,
				borderColor: ['rgb(255, 206, 86)'],
				borderWidth: 1,
				bestFit: true,
			},
			{
				yAxisID: 'B',
				type: 'bar',
				label: 'wake-up/went to bed',
				data: sleepStartStopNumber,
				backgroundColor: ['rgb(153, 102, 255, 0.2)'],
				borderColor: ['rgb(153, 102, 255, 1)'],
				bestFit: true,
				borderWidth: { top: 0, bottom: 0, right: 0, left: 2 },
			},
		],
	},
	options: {
		//Explicações de options até scales abaixo //
		plugins: {
			tooltip: {
				callbacks: {
					label: function(context) {
						if (context.dataset.label === 'wake-up/went to bed') {
							let value = context.raw;
							const formatTime = (time) => {
								let hours = Math.floor(time);
								let minutes = Math.floor((time - hours) * 60);
								hours = hours < 0 ? 24 + hours : hours;
								return hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');
							};
	
							const startTime = formatTime(value[0]);
							const endTime = formatTime(value[1]);
							return `went to bed: ${startTime}, wake-up: ${endTime}`;
						} 
						// Se o dataset for "Horas de sono", mostra horas e minutos literalmente
						else if (context.dataset.label === 'Sleep Duration') {
							let totalMinutes = context.raw * 60; // Converte horas em minutos
							let hours = Math.floor(totalMinutes / 60);
							let minutes = Math.floor(totalMinutes % 60); // Usa Math.floor para evitar arredondamento
							return `${context.dataset.label}: ${hours}h ${minutes}m`;
						} 
						// Para outros datasets, mantém o formato padrão
						else {
							return `${context.dataset.label}: ${context.formattedValue}`;
						}	
					}
				}
			}
		},
		scales: {
			A: {
				type: 'linear',
				position: 'right',
				beginAtZero: true,
				min: 0,
				max: 10,
				title: {
					display: true,
					text: 'Rating(0-10) ou Duration  Hours - Minutes', // Título para a escala A
					font: {
						size: 15 // Ajuste o tamanho da fonte conforme necessário
					}
				}
			},
			B: {
				type: 'linear',
				position: 'left',
				max: 13,
				min: -3,
				title: {
					display: true,
					text: 'HH:mm - 24h', // Título para a escala B
					font: {
						size: 15 // Ajuste o tamanho da fonte conforme necessário
					}
				},
				ticks: {
					fontSize: 40,
					count: 17,
					maxTicksLimit: 20,
					callback: function (value, index, ticks) {
						if (value < 0) {
							value = 24 + value;
						}
						let minutes = value * 60;
						let hours = Math.floor(minutes / 60);
						minutes = minutes % 60;
		
						if (minutes < 10) {
							minutes = '0' + minutes;
						}
						if (hours < 10) {
							hours = '0' + hours;
						}
		
						return hours + ':' + minutes;
					},
				},
			},
			x: {
				ticks: {
					maxRotation: 0,
					minRotation: 0,
				},
			},
		},
	},	
};


input.func(chartData, dv.container);
